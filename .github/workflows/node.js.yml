# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Validate MR
on:
  pull_request:
    branches: [ "develop" ]

jobs:
  setup:
    runs-on: ubuntu-latest
    environment: CI
    outputs:
      cache-key: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: install dependencies
        run: npm i
      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

  lint:
    runs-on: ubuntu-latest
    environment: CI
    needs: setup
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: run linter
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    environment: CI
    needs: setup
    env:
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      IRON_SESSION_KEY: ${{ vars.IRON_SESSION_KEY }}
      IRON_SESSION_COOKIE_NAME: ${{ vars.IRON_SESSION_COOKIE_NAME }}
      REFRESH_TOKEN_KEY: ${{ vars.REFRESH_TOKEN_KEY }}
      CI: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ vars.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: setup database
        run: npx prisma migrate deploy
      - name: run jest tests
        run: npm run test:jest

  build:
    runs-on: ubuntu-latest
    environment: CI
    needs: test
    env:
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      IRON_SESSION_KEY: ${{ vars.IRON_SESSION_KEY }}
      IRON_SESSION_COOKIE_NAME: ${{ vars.IRON_SESSION_COOKIE_NAME }}
      REFRESH_TOKEN_KEY: ${{ vars.REFRESH_TOKEN_KEY }}
      CI: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ vars.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: setup database
        run: npx prisma migrate deploy && npx prisma db seed
      - name: build the application
        run: npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build

  post-build:
    runs-on: ubuntu-latest
    environment: CI
    needs: build
    env:
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      IRON_SESSION_KEY: ${{ vars.IRON_SESSION_KEY }}
      IRON_SESSION_COOKIE_NAME: ${{ vars.IRON_SESSION_COOKIE_NAME }}
      REFRESH_TOKEN_KEY: ${{ vars.REFRESH_TOKEN_KEY }}
      CI: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ vars.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Restore node_modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build
          path: ./build
      - name: setup database
        run: npx prisma migrate deploy && npx prisma db seed
      - name: start the application
        run: npm run start
      - name: run e2e tests
        run: npm run test:e2e
