# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Validate PR
on:
  pull_request:
    branches: [ "develop" ]
  push:
    branches: [ "develop" ]

jobs:
  # Stage 1: Testing and Linting
  jest-dal-unit:
    name: Jest Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run unit tests
        run: npm run test:dal:unit

  jest-components:
    name: Jest Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run components tests
        run: npm run test:components

  jest-dal-integration:
    name: Jest Integration Tests
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      IRON_SESSION_KEY: ${{ vars.IRON_SESSION_KEY }}
      IRON_SESSION_COOKIE_NAME: ${{ vars.IRON_SESSION_COOKIE_NAME }}
      REFRESH_TOKEN_KEY: ${{ vars.REFRESH_TOKEN_KEY }}
      CI: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ vars.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup database
        run: npx prisma migrate deploy && npx prisma db seed
      - name: Run integration tests
        run: npm run test:dal:integration

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint

  # Stage 2: Build
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [jest-dal-unit, jest-components, jest-dal-integration, lint]
    env:
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      IRON_SESSION_KEY: ${{ vars.IRON_SESSION_KEY }}
      IRON_SESSION_COOKIE_NAME: ${{ vars.IRON_SESSION_COOKIE_NAME }}
      REFRESH_TOKEN_KEY: ${{ vars.REFRESH_TOKEN_KEY }}
      CI: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ vars.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Setup database
        run: npx prisma migrate deploy && npx prisma db seed
      - name: Build application
        run: npm run build
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
            package.json
            prisma/
          retention-days: 1

  # Stage 3: E2E Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build
    env:
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      IRON_SESSION_KEY: ${{ vars.IRON_SESSION_KEY }}
      IRON_SESSION_COOKIE_NAME: ${{ vars.IRON_SESSION_COOKIE_NAME }}
      REFRESH_TOKEN_KEY: ${{ vars.REFRESH_TOKEN_KEY }}
      CI: true
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ vars.DATABASE_USERNAME }}
          POSTGRES_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
      - name: Setup database
        run: npx prisma migrate deploy && npx prisma db seed
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      - name: Run E2E tests
        run: npm run test:e2e
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
